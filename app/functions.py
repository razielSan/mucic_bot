from typing import List, Dict
from urllib.parse import quote
import os
import re
import json
from pathlib import Path

import requests
from bs4 import BeautifulSoup

from models import Executor, User
from repository.executor import ExecutorSQLAlchemyRepository


def get_info_executors(executor: Executor, user: User):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ."""
    data_list = []

    if executor.country == user.name and executor.name == user.name:
        info = "üéß –°–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω  üéß"
    else:
        executors = [genre.title for genre in executor.genres]
        data = f"üéß {executor.name} üéß\n\nüéß –°—Ç—Ä–∞–Ω–∞: {executor.country} üéß\n–ñ–∞–Ω—Ä—ã: {executors[0]}"
        data_list.append(data)
        data_list.extend(executors[1:])
        data_executor = ", ".join(data_list).strip(",")

        album = "\n\nüéß –°–ø–∏—Å–æ–∫ –∞–ª—å–±–æ–º–æ–≤ üéß"

        info = "".join([data_executor, album])
    return info


def get_executor_is_button(
    executor_id: int,
    user: User,
    forward=False,
    back=False,
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥."""
    executor = ExecutorSQLAlchemyRepository().get_executor_by_id(
        id=executor_id,
        user_id=user.id,
    )

    executors_list = ExecutorSQLAlchemyRepository().get_executors_is_user(
        user_id=user.id,
    )

    order = 0
    for index, ex in enumerate(executors_list, start=1):
        if executor.name == ex.name and ex.country == executor.country:
            order = index
    if len(executors_list) == 1:
        order = 0
        return executors_list[order]
    else:
        order = order + 1 if forward else order - 1
    return executors_list[order - 1]


def get_info_is_bot():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —É–º–µ–Ω–∏–π –±–æ—Ç–∞."""

    data = (
        "–û–ø–∏—Å–∞–Ω–∏–µ —É–º–µ–Ω–∏–π –±–æ—Ç–∞\n\n\start - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞\n\n"
        "–î–æ–±–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É (—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ) - –ó–¥–µ—Å—å –≤—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –º—É–∑—ã–∫—É –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤\n\n"
        "–ò—Å–∫–∞—Ç—å –º—É–∑—ã–∫—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –ø–æ–∏—Å–∫–∞\n\n"
        "–î–æ–±–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É –≤ —Å–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω - –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–±–æ—Ä–Ω–∏–∫ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Å–µ–Ω\n\n"
        "–°–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω - –í—ã–≤–æ–¥–∏—Ç –ø–µ—Å–Ω–∏ –∏–∑ —Å–±–æ—Ä–Ω–∏–∫–∞ –ø–µ—Å–µ–Ω.–ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –∏—Ö,—É–¥–∞–ª—è—Ç—å –ø–µ—Å–Ω–∏, –¥–æ–±–∞–≤–ª—è—Ç—å –ø–µ—Å–Ω–∏\n\n"
        "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤ - –í—ã–≤–æ–¥–∏—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –º—É–∑—ã–∫—É –∏ —Å–æ–≤–µ—Ä—à–∞—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."
        "–ï—Å–ª–∏ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
        "–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π - –í—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å\n\n"
        "–ü–æ–∏—Å–∫ - –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—ã—Å–∫–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –∂–∞–Ω—Ä—É, –∏–º–µ–Ω–∏, —Å—Ç—Ä–∞–Ω–µ –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å—Ä–∞–∑—É."
        "–ï—Å–ª–∏ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    )
    return data


def get_list_albums_executors(list_albums: List[str]):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ –≤—Å–µ–º–∏ –∞–ª—å–±–æ–º–∞–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    albums = []
    for index, data in enumerate(list_albums, start=1):
        albums.append(f"{index}. {data}")
    return "\n".join(albums)


def get_executors_is_users(
    list_executor: List[Executor],
    user: User,
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    for index, executor in enumerate(list_executor):
        if executor.name == user.name and executor.country == user.name:
            list_executor.pop(index)
    data = [executor.name for executor in list_executor]

    data.sort()
    if data:
        executors = "\n".join(data)
    else:
        executors = "–£ –≤–∞—Å –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º –∞—Ä—Ö–∏–≤–µ"
    return executors


def get_found_list_artists_for_hitmotop(url: str, name: str, count: int):
    """–ò—â–µ—Ç –º—É–∑—ã–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å —Å–∞–π—Ç–∞ https://ru.hitmotop.com –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    —Å–ø–∏—Å–æ–∫ —Å url –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.

    Args:
        url (str): URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        name (str): –ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤
    """

    name = quote(string=f"{name}")

    url = f"https://ru.hitmotop.com/search?q={name}"

    HEADERS = {
        "Accept": "*/*",
        "User-Agent": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Mobile Safari/537.36",
    }

    response = requests.get(url=url, headers=HEADERS)

    soup = BeautifulSoup(response.text, "lxml")

    artists = soup.find_all(
        name="li",
        attrs={"class": "tracks__item track mustoggler"},
    )

    list_artists = []
    for index, music in enumerate(artists):
        if index >= count:
            break
        array = music.get("data-musmeta")
        data = eval(array)
        artist = data["artist"]
        title = data["title"]
        url = data["url"].replace("\\", "")
        list_artists.append([artist, title, url])

    return list_artists


def get_data_names_and_title_aritists(list_artists: List):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ–¥–µ—Ä–∂–∞—â—É—é –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ
    1. <executor_name> - <title>

    Args:
        list_artists (List): –°–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏ url –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ
        [<artists>, <title>, <url>]
    """

    data_list = []
    order = 1
    for executor, title, url in list_artists:
        data_list.append(f"{order}. {executor} - {title}")
        order += 1
    return "\n".join(data_list).strip("\\n")


def download_music_to_the_path(url: str, path: str):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –º—É–∑—ã–∫—É –≤ —É–∫–∞–∑–∞–Ω—ã–π –ø—É—Ç—å.

    Args:
        url (str): URL –æ—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω–∞ –º—É–∑—ã–∫–∞
        path (str): –ü—É—Ç—å –∫—É–¥–∞ –±—É–¥–µ—Ç –∑–∞–∫–∞—á–∞–Ω–∞ –º—É–∑—ã–∫–∞
    """
    HEADERS = {
        "Accept": "*/*",
        "User-Agent": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Mobile Safari/537.36",
    }

    res = requests.get(url, headers=HEADERS, stream=True)
    with open(f"{path}", "wb") as file:
        for chunk in res.iter_content(1024):
            file.write(chunk)


def create_json_executors_dict(
    path: str,
    upload_path: str,
):
    """–°–æ–∑–¥–∞–µ—Ç json —Ñ–∞–π–ª —Å –∂–∞–Ω—Ä–∞–º–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ –≤ —ç—Ç–∏—Ö –∂–∞–Ω—Ä–∞—Ö.

    Args:
        path (str): –ü—É—Ç—å –æ—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
        upload_path (str): –ü—É—Ç—å –∫—É–¥–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è json —Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
    """
    try:
        executors = []

        count = 0
        for dirpath, dirname, filename in os.walk(top=path):
            if dirname or count == 0:
                data = dirname[0]
                if re.match(r"[^()]+[(]", data) or count == 0:
                    executors.append((dirname, dirpath))
            count += 1

        data_dict = {genre: None for genre in executors[0][0]}

        for executor, path in executors[1:]:
            genre = path.split("\\")[3]

            if genre in data_dict:
                if data_dict.get(genre):
                    data: List = data_dict[f"{genre}"]
                    data.extend(executor)
                    data_dict[f"{genre}"] = data
                else:
                    data_dict[f"{genre}"] = executor

        with open(upload_path, "w", encoding="utf-8") as file:
            json.dump(data_dict, file, ensure_ascii=False, indent=4)
        return True
    except Exception as err:
        print(err)
        return False


def get_dict_executors_music_archive(path: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∂–∞–Ω—Ä–æ–º –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ —ç—Ç–æ–≥–æ –∂–∞–Ω—Ä–∞ –∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.

    Args:
        path (str): –ü—É—Ç—å –¥–æ json —Ñ–∞–π–ª–∞
    """
    try:
        with open(path, "r", encoding="utf-8") as file:
            data_dict = json.load(file)

        return data_dict
    except Exception as err:
        print(err)
        return False
