from copy import deepcopy

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types.input_file import FSInputFile
from aiogram.filters import StateFilter

from repository.executor import ExecutorSQLAlchemyRepository
from repository.album import AlbumSQLAlchemyRepository
from repository.genre import GengreSQLAlchemyRepository
from repository.song import SongSQLAlchemyRepository
from repository.user import UserSQLAlchemyRepository
from repository.genreExecutor import GenreExecutorSQLAlchemyRepository
from functions import get_info_executors, get_executor_is_button
from keyboards.inline import get_albums_executors_button
from keyboards.reply import (
    get_update_genre_executors_button,
    get_delete_executor_and_album_button,
    get_update_executorname_and_country_button,
)
from extensions import bot
from views.add_music import AddMusic, add_genre
from config import settings


router = Router(name=__name__)


@router.message(StateFilter(None), F.text == "üéº –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤ üéº")
async def get_executors_information(message: Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ."""

    telegram = message.chat.id

    user = UserSQLAlchemyRepository().get_user_by_telegram(telegram=telegram)
    if not user:
        UserSQLAlchemyRepository().create_user(
            telegram=telegram, name=message.from_user.first_name
        )
        user = UserSQLAlchemyRepository().get_user_by_telegram(telegram=telegram)

    executors = ExecutorSQLAlchemyRepository().get_executors_is_user(
        user_id=user.id,
    )

    if executors:
        executor = executors[0]
        data_executor = get_info_executors(
            executor=executor,
            user=user,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–ª—å–±–æ–º —Å–±–æ—Ä–Ω–∏–∫–æ–º –ø–µ—Å–µ–Ω
        album = None
        list_songs = None
        if executor.name == user.name and executor.country == user.name:
            album = AlbumSQLAlchemyRepository().get_album(
                executor_name=user.name,
                title=settings.AlBUM_TITLE_COLLECTION,
                executor_id=executor.id,
            )
            list_songs = SongSQLAlchemyRepository().get_songs(album_id=album.id)

        await bot.send_message(
            chat_id=message.chat.id,
            reply_markup=ReplyKeyboardRemove(),
            text="–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤",
        )
        await message.answer(
            text=data_executor,
            reply_markup=get_albums_executors_button(
                executor=executor, user=user, album=album, list_songs=list_songs
            ),
        )
    else:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π",
            reply_markup=ReplyKeyboardRemove(),
        )


@router.callback_query(F.data.startswith("forward ") | F.data.startswith("back "))
async def get_executors_information_when_you_press_the_button(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤–ø–µ—Ä–µ–¥."""
    button, executor_id = call.data.split(" ")

    forward = True if button == "forward" else False
    back = True if button == "back" else False

    user = UserSQLAlchemyRepository().get_user_by_telegram(
        telegram=call.message.chat.id,
    )

    executor = get_executor_is_button(
        executor_id=int(executor_id),
        user=user,
        forward=forward,
        back=back,
    )
    data_executor = get_info_executors(executor=executor, user=user)

    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–ª—å–±–æ–º —Å–±–æ—Ä–Ω–∏–∫–æ–º –ø–µ—Å–µ–Ω
    album = None
    list_songs = None
    if executor.name == user.name and executor.country == user.name:
        album = AlbumSQLAlchemyRepository().get_album(
            executor_name=user.name,
            title=settings.AlBUM_TITLE_COLLECTION,
            executor_id=executor.id,
        )
        if album:
            list_songs = SongSQLAlchemyRepository().get_songs(album_id=album.id)

    await bot.edit_message_text(
        text=data_executor,
        reply_markup=get_albums_executors_button(
            executor=executor, user=user, album=album, list_songs=list_songs
        ),
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        inline_message_id=call.id,
    )


@router.callback_query(F.data.startswith("AlbumList "))
async def get_albums_executor_by_is_forward_or_back(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–ª—å–±–æ–º—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤–ø–µ—Ä–µ–¥."""
    _, flag, executor_id, album_id, album_position = call.data.split(" ")

    user = UserSQLAlchemyRepository().get_user_by_telegram(
        telegram=call.message.chat.id,
    )

    executor = ExecutorSQLAlchemyRepository().get_executor_by_id(
        id=int(executor_id), user_id=user.id
    )

    data_executor = get_info_executors(executor=executor, user=user)

    await bot.edit_message_text(
        text=data_executor,
        reply_markup=get_albums_executors_button(
            user=user,
            executor=executor,
            album_position=int(album_position),
        ),
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
    )


@router.callback_query(F.data.startswith("album "))
async def get_album_songs(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –¥–ª—è –∞–ª—å–±–æ–º–∞."""
    _, data = call.data.split(" ")

    album_id, executor_id, move = data.split("_")

    user = UserSQLAlchemyRepository().get_user_by_telegram(
        telegram=call.message.chat.id,
    )
    executor = ExecutorSQLAlchemyRepository().get_executor_by_id(
        id=int(executor_id),
        user_id=user.id,
    )

    album = AlbumSQLAlchemyRepository().get_album_is_id(
        executor_id=executor.id,
        album_id=int(album_id),
    )

    if not album:
        await bot.send_message(
            chat_id=call.message.chat.id,
            text="–ê–ª—å–±–æ–º –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞",
        )
    else:
        list_songs = SongSQLAlchemyRepository().get_songs(album_id=album.id)

        data_executor = get_info_executors(executor=executor, user=user)

        album = album if move == "+" else None
        list_songs = list_songs if move == "+" else None

        await bot.edit_message_text(
            text=data_executor,
            reply_markup=get_albums_executors_button(
                user=user,
                executor=executor,
                album=album,
                list_songs=list_songs,
            ),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
        )


@router.callback_query(F.data.startswith("SongsAlbums "))
async def get_list_songs_album_by_forward_or_back(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –∏–∑ –∞–ª—å–±–æ–º–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥."""
    _, flag, executor_id, album_id, song_position = call.data.split(" ")

    user = UserSQLAlchemyRepository().get_user_by_telegram(
        telegram=call.message.chat.id,
    )

    executor = ExecutorSQLAlchemyRepository().get_executor_by_id(
        id=int(executor_id), user_id=user.id
    )

    album = AlbumSQLAlchemyRepository().get_album_is_id(
        album_id=int(album_id),
        executor_id=executor.id,
    )

    data_executor = get_info_executors(executor=executor, user=user)
    list_songs = SongSQLAlchemyRepository().get_songs(album_id=album.id)

    await bot.edit_message_text(
        text=data_executor,
        reply_markup=get_albums_executors_button(
            user=user,
            executor=executor,
            album=album,
            list_songs=list_songs,
            song_position=int(song_position),
        ),
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
    )


@router.callback_query(F.data.startswith("song "))
async def get_song_play(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Å–Ω—é –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è."""
    _, data = call.data.split(" ")
    executor_id, album_id, order = data.split("_")

    user = UserSQLAlchemyRepository().get_user_by_telegram(
        telegram=call.message.chat.id,
    )
    executor = ExecutorSQLAlchemyRepository().get_executor_by_id(
        id=int(executor_id),
        user_id=user.id,
    )

    album = AlbumSQLAlchemyRepository().get_album_is_id(
        album_id=int(album_id),
        executor_id=executor.id,
    )

    if not album:
        await bot.send_message(
            chat_id=call.message.chat.id,
            text="–ü–µ—Å–Ω—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞",
        )
    else:
        song_data = ""
        for song in album.songs:
            if song.order == int(order):
                song_data = song

        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞
        if not song_data:
            await bot.send_message(
                chat_id=call.message.chat.id,
                text="–ü–µ—Å–Ω—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∏ –∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞",
            )
        else:
            if song_data.file_id.startswith("D:\\"):
                await call.message.answer_audio(
                    audio=FSInputFile(path=song_data.file_id),
                    caption=song_data.name,
                )
            else:
                await call.message.answer_audio(
                    audio=song_data.file_id,
                    caption=song_data.name,
                )


# –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∞–Ω—Ä–∞
class UpdateGenre(StatesGroup):
    """FSM –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∞–Ω—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –º—É–∑—ã–∫–∏."""

    executor_id = State()
    genre_list = State()


@router.callback_query(F.data.startswith("update_genre "))
async def start_update_genre(call: CallbackQuery, state: FSMContext):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ update_genre."""
    _, executor_id = call.data.split(" ")

    await state.clear()
    await state.set_state(UpdateGenre.executor_id)
    await state.update_data(executor_id=int(executor_id))

    await call.message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä—ã –≤ –∫–æ—Ç–æ—Ä–æ–º –∏–≥—Ä–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\n"
        "–º–µ—Ç–∞–ª–ª –ø–∞–Ω–∫-—Ä–æ–∫ –±–ª—é–∑",
        reply_markup=get_update_genre_executors_button(),
    )

    await state.set_state(UpdateGenre.genre_list)


@router.message(UpdateGenre.genre_list, F.text == "<–û—Ç–º–µ–Ω–∞>")
async def genre_cancel_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∞–Ω—Ä–∞."""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer(
        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove(),
    )
    await get_executors_information(message=message)


@router.message(UpdateGenre.genre_list, F.text)
async def finish_update_genre(message: Message, state: FSMContext):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∂–∞–Ω—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    genres = set(message.text.split(" "))
    data = await state.get_data()
    user = UserSQLAlchemyRepository().get_user_by_telegram(
        telegram=message.chat.id,
    )

    genres_set = GengreSQLAlchemyRepository().get_all_genre()
    GengreSQLAlchemyRepository().get_genres(title_list=list(genres))

    genres_list_update = deepcopy(genres)

    genres.difference_update(genres_set)
    if genres:
        GengreSQLAlchemyRepository().create_many_genre(title_list=list(genres))

    genres_list_update = GengreSQLAlchemyRepository().get_genres(
        title_list=genres_list_update
    )

    GenreExecutorSQLAlchemyRepository().delete_executor_genre(
        executor_id=data["executor_id"]
    )
    for genre in genres_list_update:
        GenreExecutorSQLAlchemyRepository().executor_genre(
            executor_id=data["executor_id"], genre_id=genre.id
        )

    await state.clear()
    await message.answer(
        "–ñ–∞–Ω—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
        reply_markup=ReplyKeyboardRemove(),
    )
    await get_executors_information(message=message)


# –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
class DeleteExecutor(StatesGroup):
    """FSM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""

    executor_id = State()


@router.callback_query(F.data.startswith("delete_executor "))
async def start_delete_executor(call: CallbackQuery, state: FSMContext):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ delete_executor."""
    _, executor_id = call.data.split(" ")

    await state.clear()
    await state.set_state(DeleteExecutor.executor_id)
    await state.update_data(executor_id=int(executor_id))

    await call.message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ?–ù–∞–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª'",
        reply_markup=get_delete_executor_and_album_button(),
    )


@router.message(DeleteExecutor.executor_id, F.text)
async def finish_delete_executor(message: Message, state: FSMContext):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–≤–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ."""
    result = message.text
    if result == "–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª":
        await state.clear()
        await message.answer(
            "–£–¥–∞–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove(),
        )
        await get_executors_information(message=message)
    else:
        data = await state.get_data()
        user = UserSQLAlchemyRepository().get_user_by_telegram(telegram=message.chat.id)
        AlbumSQLAlchemyRepository().delete_all_albums(executor_id=data["executor_id"])
        ExecutorSQLAlchemyRepository().delete_executor_is_id(
            user_id=user.id,
            executor_id=data["executor_id"],
        )

        await state.clear()
        await message.answer(
            "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞",
            reply_markup=ReplyKeyboardRemove(),
        )
        await get_executors_information(message=message)


# –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
# –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é add_genre
@router.callback_query(F.data.startswith("add_album "))
async def add_album_is_executor(call: CallbackQuery, state: FSMContext):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ add_album."""
    _, executor_id = call.data.split(" ")
    user = UserSQLAlchemyRepository().get_user_by_telegram(
        telegram=call.message.chat.id,
    )
    executor = ExecutorSQLAlchemyRepository().get_executor_by_id(
        id=int(executor_id),
        user_id=user.id,
    )

    await state.clear()
    await state.set_state(AddMusic.executor)
    await state.update_data(executor=executor.name)
    await state.set_state(AddMusic.country)
    await state.update_data(country=executor.country)
    await state.set_state(AddMusic.genre)
    await state.update_data(genre=None)

    await add_genre(state=state, message=call.message)


# –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
class UpdateNameExecutor(StatesGroup):
    """FSM –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""

    executor_id = State()
    name_executor = State()


@router.callback_query(F.data.startswith("—Åhange_name "))
async def change_executor_name(call: CallbackQuery, state: FSMContext):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É change_name."""
    _, executor_id = call.data.split(" ")

    await state.clear()
    await state.set_state(UpdateNameExecutor.executor_id)
    await state.update_data(executor_id=int(executor_id))
    await state.set_state(UpdateNameExecutor.name_executor)

    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
        reply_markup=get_update_executorname_and_country_button(),
    )


@router.message(UpdateNameExecutor.name_executor, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_change_name_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer(
        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove(),
    )
    await get_executors_information(message=message)


@router.message(UpdateNameExecutor.name_executor, F.text)
async def name_executor(message: Message, state: FSMContext):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    executor_name = message.text
    data = await state.get_data()

    user = UserSQLAlchemyRepository().get_user_by_telegram(
        telegram=message.chat.id,
    )
    executor = ExecutorSQLAlchemyRepository().get_executor_by_id(
        user_id=user.id,
        id=int(data["executor_id"]),
    )
    ExecutorSQLAlchemyRepository().update_name(
        execotor_name=executor_name,
        user_id=user.id,
        executor_id=executor.id,
    )
    AlbumSQLAlchemyRepository().update_executor_name_is_album(
        executor_id=executor.id, executor_name=executor_name
    )

    album_list_id = []
    for album in executor.albums:
        album_list_id.append(album.id)

    SongSQLAlchemyRepository().update_executor_name_is_song(
        list_albums_id=album_list_id,
        executor_name=executor_name,
    )

    await state.clear()
    await message.answer(
        "–ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove()
    )
    await get_executors_information(message=message)


# –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
class ChangeAlbumExecutor(StatesGroup):
    """FSM –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""

    executor_id = State()
    album_id = State()
    title = State()


@router.callback_query(F.data.startswith("change_album "))
async def change_album_title(call: CallbackQuery, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSM ChangeAlbumExecutor.–ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∞–ª—å–±–æ–º–∞."""
    _, executor_id, album_id = call.data.split(" ")

    await state.clear()
    await state.set_state(ChangeAlbumExecutor.executor_id)
    await state.update_data(executor_id=int(executor_id))
    await state.set_state(ChangeAlbumExecutor.album_id)
    await state.update_data(album_id=int(album_id))

    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∞–ª—å–±–æ–º–∞",
        reply_markup=get_update_executorname_and_country_button(),
    )

    await state.set_state(ChangeAlbumExecutor.title)


@router.message(ChangeAlbumExecutor.title, F.text == "–û—Ç–º–µ–Ω–∞")
@router.message(ChangeAlbumExecutor.executor_id, F.text == "–û—Ç–º–µ–Ω–∞")
@router.message(ChangeAlbumExecutor.album_id, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_change_album_title_handler(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSM ChangeAlbumExecutor.–û—Ç–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª–±–æ–º–∞."""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer(
        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ù–∞–∑–≤–∞–Ω–∏—è –ê–ª—å–±–æ–º–∞ –û—Ç–µ–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove(),
    )
    await get_executors_information(message=message)


@router.message(ChangeAlbumExecutor.title, F.text)
async def finish_change_album_title(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSM ChangeAlbumExecutor.–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞."""
    data = await state.get_data()
    executor_id = data["executor_id"]
    album_id = data["album_id"]
    album_tilte = message.text

    AlbumSQLAlchemyRepository().update_title_is_album(
        album_id=album_id, executor_id=executor_id, title=album_tilte
    )

    SongSQLAlchemyRepository().update_executor_album_is_song(
        album_id=album_id,
        executor_album=album_tilte,
    )

    await state.clear()
    await message.answer(
        "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove()
    )
    await get_executors_information(message=message)


# –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
class UpdateCountryExecutor(StatesGroup):
    """FSM –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""

    executor_id = State()
    country_executor = State()


@router.callback_query(F.data.startswith("change_country "))
async def change_executor_country(call: CallbackQuery, state: FSMContext):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É change_country."""
    _, executor_id = call.data.split(" ")

    await state.clear()
    await state.set_state(UpdateCountryExecutor.executor_id)
    await state.update_data(executor_id=int(executor_id))
    await state.set_state(UpdateCountryExecutor.country_executor)

    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.",
        reply_markup=get_update_executorname_and_country_button(),
    )


@router.message(UpdateCountryExecutor.country_executor, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_change_country_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer(
        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove(),
    )
    await get_executors_information(message=message)


@router.message(UpdateCountryExecutor.country_executor, F.text)
async def country_executorr(message: Message, state: FSMContext):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    executor_country = message.text
    data = await state.get_data()

    user = UserSQLAlchemyRepository().get_user_by_telegram(
        telegram=message.chat.id,
    )
    executor = ExecutorSQLAlchemyRepository().get_executor_by_id(
        user_id=user.id,
        id=int(data["executor_id"]),
    )
    ExecutorSQLAlchemyRepository().update_country(
        execotor_country=executor_country,
        user_id=user.id,
        executor_id=executor.id,
    )
    AlbumSQLAlchemyRepository().update_executor_county_is_album(
        executor_id=executor.id,
        executor_country=executor_country,
    )

    await state.clear()
    await message.answer(
        "–°—Ç—Ä–∞–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup=ReplyKeyboardRemove()
    )
    await get_executors_information(message=message)


# –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
class DeleteAlbum(StatesGroup):
    """FSM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞."""

    executor_id = State()
    album_id = State()


@router.callback_query(F.data.startswith("delete_album "))
async def start_delete_album(call: CallbackQuery, state: FSMContext):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ delete_album."""
    _, data = call.data.split(" ")
    executor_id, album_id = data.split("_")

    await state.clear()
    await state.set_state(DeleteAlbum.executor_id)
    await state.update_data(executor_id=int(executor_id))
    await state.set_state(DeleteAlbum.album_id)
    await state.update_data(album_id=int(album_id))

    await call.message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–ª—å–±–æ–º ? –ù–∞–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–ª—å–±–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª'",
        reply_markup=get_delete_executor_and_album_button(),
    )


@router.message(DeleteAlbum.album_id, F.text)
async def finish_delete_album(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSM DeleteAlbum.–£–¥–∞–ª—è–µ—Ç –∞–ª—å–±–æ–º –∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞."""
    data = await state.get_data()

    mess = message.text
    if mess == "–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª":
        await state.clear()
        await message.answer(
            "–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove(),
        )
        await get_executors_information(message=message)
    else:
        AlbumSQLAlchemyRepository().delete_album_is_id(
            executor_id=data["executor_id"],
            album_id=data["album_id"],
        )

        await state.clear()
        await message.answer("–ê–ª—å–±–æ–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        await get_executors_information(message=message)
