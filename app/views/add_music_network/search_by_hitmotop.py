import os
from pathlib import Path

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from keyboards.reply import (
    get_add_music_button,
    get_button_for_add_music_network,
    get_music_menu_button,
)
from functions import (
    get_found_list_artists_for_hitmotop,
    get_data_names_and_title_aritists,
    download_music_to_the_path,
)
from config import settings
from extensions import bot
from error_handlers import chek_data_is_interval
from repository.user import UserSQLAlchemyRepository
from repository.album import AlbumSQLAlchemyRepository
from repository.executor import ExecutorSQLAlchemyRepository
from repository.song import SongSQLAlchemyRepository
from repository.genre import GengreSQLAlchemyRepository
from views.collection_songs import get_collection_songs

router = Router(name=__name__)


class SearchHitmotop(StatesGroup):
    name = State()
    list_artists = State()
    order = State()


@router.message(StateFilter(None), F.text == "üíª –ò—Å–∫–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ hitmotop üíª")
async def search_hitmotop(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSM SearchHitmotop.–ü—Ä–æ—Å–∏—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω—ã—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–Ω–∏."""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"
        "–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.–ü–µ—Å–Ω—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω",
        reply_markup=get_add_music_button(),
    )
    await state.set_state(SearchHitmotop.name)


@router.message(SearchHitmotop.name, F.text == "–û—Ç–º–µ–Ω–∞")
@router.message(SearchHitmotop.order, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_search_hitmotop(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSM SearchHitmotop.–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è."""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("–ü–æ–∏—Å–∫ –ø–µ—Å–µ–Ω —Å —Å–∞–π—Ç–∞ ru.hitmotop.com –æ—Ç–º–µ–Ω–µ–Ω")
    await bot.send_message(
        chat_id=message.chat.id,
        text="–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤",
        reply_markup=get_music_menu_button(),
    )


@router.message(SearchHitmotop.name, F.text)
async def search_executor_hitmotop(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSM SearchHitmotop.–î–æ–±–∞–≤–ª—è–µ—Ç –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –≤ FSM.
    –ü—Ä–æ—Å–∏—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –ø–µ—Å–Ω—è –¥–ª—è –¥–æ–±–∞–≤–ª—è–Ω–∏—è –≤ —Å–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω.
    """

    list_artists = get_found_list_artists_for_hitmotop(
        url=settings.HITMOTOP_SEARCH_URL,
        name=message.text,
        count=settings.COUNT_HITMOTOP,
    )
    if not list_artists:
        await message.answer(
            text=f"–£–∫–∞–∑–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ"
            "\n\n–í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"
            "–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.–ü–µ—Å–Ω—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω",
        )
    else:
        data = get_data_names_and_title_aritists(list_artists=list_artists)

        await message.answer(text=data)
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Å–Ω–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤—Ç—å –≤ —Å–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω",
        )
        await state.update_data(name=message.text)
        await state.set_state(SearchHitmotop.list_artists)
        await state.update_data(list_artists=list_artists)
        await state.set_state(SearchHitmotop.order)


@router.message(SearchHitmotop.order, F.text)
async def search_order_hitmotop(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å FSM SearchHitmotop.–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Å–Ω—é –≤ —Å–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω –∏
    —Å–∫–∞—á–∏–≤–∞–µ—Ç –µ–µ –≤ media/hitmotop/<–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/.
    """
    data = await state.get_data()

    order, mess = chek_data_is_interval(
        data=message.text,
        interval=[1, len(data["list_artists"])],
    )
    if not order:
        await message.answer(
            text=f"{mess['err']}\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–Ω–æ–≤–∞ –Ω–æ–º–µ—Ä –ø–µ—Å–Ω–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω"
        )
    else:

        await bot.send_message(
            chat_id=message.chat.id,
            text="–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏ –≤ —Å–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω",
        )

        artist = data["list_artists"][order - 1]
        name = artist[0]
        title = artist[1]
        url = artist[2]
        dir_path = Path(__file__).parent.parent.parent
        filename = f"{name} - {title}.mp3"

        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å–≤—É—Ç—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–∑–¥–∞–µ—Ç –µ–µ
        user = UserSQLAlchemyRepository().get_user_by_telegram(
            telegram=message.chat.id,
        )
        user_path = os.path.join(dir_path, settings.HITMOTOP_PATH, f"{user.name}")

        if not os.path.exists(user_path):
            os.mkdir(user_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –ø–µ—Å–Ω—è –≤ –ø—É—Ç–∏
        path = os.path.join(user_path, f"{filename}")
        if os.path.exists(path):

            await state.clear()
            await message.answer("–¢–∞–∫–∞—è –ø–µ—Å–Ω—è —É–∂–µ –µ—Å—Ç—å –≤ —Å–±–æ—Ä–Ω–∏–∫–µ –ø–µ—Å–µ–Ω")
            await search_hitmotop(
                message=message,
                state=state,
            )
        else:
            download_music_to_the_path(url=url, path=path)

            executor = ExecutorSQLAlchemyRepository().get_executor_by_name_and_country(
                name=user.name,
                country=user.name,
                user_id=user.id,
            )

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω
            if not executor:
                genre = GengreSQLAlchemyRepository().get_genres(
                    title_list=["—Å–±–æ—Ä–Ω–∏–∫"],
                )
                if not genre:
                    GengreSQLAlchemyRepository().create_one_genre(title="—Å–±–æ—Ä–Ω–∏–∫")
                    genre = GengreSQLAlchemyRepository().get_genres(
                        title_list=["—Å–±–æ—Ä–Ω–∏–∫"],
                    )

                ExecutorSQLAlchemyRepository().create_executor(
                    name=user.name,
                    user=user,
                    list_genres=genre,
                    country=user.name,
                )

                executor = (
                    ExecutorSQLAlchemyRepository().get_executor_by_name_and_country(
                        name=user.name, country=user.name, user_id=user.id
                    )
                )

            album = AlbumSQLAlchemyRepository().get_album(
                executor_name=executor.name,
                title=settings.AlBUM_TITLE_COLLECTION,
                executor_id=executor.id,
            )

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–±–æ—Ä–Ω–∏–∫–∞ –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω
            if not album:
                AlbumSQLAlchemyRepository().create_album(
                    title=settings.AlBUM_TITLE_COLLECTION,
                    year=-1,
                    executor_country=executor.country,
                    executor_id=executor.id,
                    executor_name=executor.name,
                )
                album = AlbumSQLAlchemyRepository().get_album(
                    executor_id=executor.id,
                    title=settings.AlBUM_TITLE_COLLECTION,
                    executor_name=executor.name,
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –ø–µ—Å–Ω—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –≤ –±–∞–∑—ã–µ –¥–∞–Ω–Ω—ã—Ö
            song = SongSQLAlchemyRepository().get_song(name=filename)
            if song:
                await state.clear()
                await message.answer("–¢–∞–∫–∞—è –ø–µ—Å–Ω—è —É–∂–µ –µ—Å—Ç—å –≤ —Å–±–æ—Ä–Ω–∏–∫–µ –ø–µ—Å–µ–Ω")
                await search_hitmotop(
                    message=message,
                    state=state,
                )
            else:
                song = SongSQLAlchemyRepository().get_songs(
                    album_id=album.id,
                )
                order = song[-1].order if song else 0
                SongSQLAlchemyRepository().create_songs(
                    songs=[[path, filename]],
                    album_id=album.id,
                    executor_name=executor.name,
                    order=order + 1,
                    executor_album=album.title,
                )

                await state.clear()
                await message.answer(
                    f"–ü–µ—Å–Ω—è {filename} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω",
                    reply_markup=ReplyKeyboardRemove(),
                )
                await get_collection_songs(message=message)
