from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from extensions import bot
from keyboards.inline import (
    get_search_inline_button,
    get_button_is_search_executor,
    get_albums_executors_button,
)
from keyboards.reply import get_search_reply_button, get_music_menu_button
from repository.user import UserSQLAlchemyRepository
from repository.executor import ExecutorSQLAlchemyRepository
from functions import get_info_executors


router = Router(name=__name__)


@router.message(StateFilter(None), F.text == "üîé –ü–æ–∏—Å–∫ üîç")
async def search(message: Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    telegram = message.chat.id
    user = UserSQLAlchemyRepository().get_user_by_telegram(telegram=telegram)
    if not user:
        UserSQLAlchemyRepository().create_user(
            telegram=telegram, name=message.from_user.first_name
        )
        user = UserSQLAlchemyRepository().get_user_by_telegram(telegram=telegram)

    executors = ExecutorSQLAlchemyRepository().get_executors_is_user(
        user_id=user.id,
    )

    for index, executor in enumerate(executors):
        if executor.name == user.name and executor.country == user.name:
            executors.pop(index)

    if not executors:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º –∞—Ä—Ö–∏–≤–µ",
            reply_markup=get_music_menu_button(),
        )
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏", reply_markup=ReplyKeyboardRemove()
    )
    await bot.send_message(
        text="–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞",
        chat_id=message.chat.id,
        reply_markup=get_search_inline_button(),
    )


# –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏, —Å—Ç—Ä–∞–Ω–µ –∏ –∂–∞–Ω—Ä—É
class SearchName(StatesGroup):
    """FSM –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏, —Å—Ç—Ä–∞–Ω–µ –∏ –∂–∞–Ω—Ä—É."""

    executor_name = State()
    executor_country = State()
    ececutor_genre = State()


@router.callback_query(F.data.startswith("search_country"))
@router.callback_query(F.data.startswith("search_genre"))
@router.callback_query(F.data.startswith("search_name"))
@router.callback_query(F.data.startswith("search_all"))
async def search_name(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    await state.clear()

    _, search = call.data.split("_")
    if search.startswith("name"):
        search = "–∏–º—è"
        await state.set_state(SearchName.executor_name)
        await state.update_data(executor_name=True)
    elif search == "country":
        search = "—Å—Ç—Ä–∞–Ω—É"
        await state.set_state(SearchName.executor_country)
        await state.update_data(executor_country=True)
    elif search == "genre":
        search = "–∂–∞–Ω—Ä"
        await state.set_state(SearchName.ececutor_genre)
        await state.update_data(genre=True)
    else:
        user = UserSQLAlchemyRepository().get_user_by_telegram(
            telegram=call.message.chat.id,
        )
        executors = ExecutorSQLAlchemyRepository().get_executors_is_user(
            user_id=user.id,
        )

        await state.clear()
        await bot.send_message(
            chat_id=call.message.chat.id,
            text="–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
            reply_markup=ReplyKeyboardRemove(),
        )

        # –£–¥–∞–ª—è–µ—Ç –∏–∑ –≤—ã–¥–∞—á–∏ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω
        for index, executor in enumerate(executors):
            if executor.name == user.name and executor.country == user.name:
                executors.pop(index)

        await call.message.answer(
            text="–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π",
            reply_markup=get_button_is_search_executor(
                executors_list=executors,
            ),
        )
        return

    await call.message.answer(
        text=f"–ù–∞–ø–∏—à–∏—Ç–µ {search} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'",
        reply_markup=get_search_reply_button(),
    )


@router.message(SearchName.executor_name, F.text)
@router.message(SearchName.executor_country, F.text)
@router.message(SearchName.ececutor_genre, F.text)
async def search_executor(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏, —Å—Ç—Ä–∞–Ω–µ –∏ –∂–∞–Ω—Ä—É."""
    data = await state.get_data()
    executor_name = data.get("executor_name")
    executor_country = data.get("executor_country")
    genre = data.get("genre")

    mess = message.text
    if mess == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=ReplyKeyboardRemove()
        )
        await search(message=message)
    else:
        await state.clear()
        user = UserSQLAlchemyRepository().get_user_by_telegram(telegram=message.chat.id)
        if executor_name:

            executors_list = ExecutorSQLAlchemyRepository().get_executors_is_user(
                user_id=user.id
            )
            executors = []
            for executor in executors_list:
                if executor.name.lower() == mess.lower():
                    executors.append(executor)
            await bot.send_message(
                chat_id=message.chat.id,
                text="–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
                reply_markup=ReplyKeyboardRemove(),
            )
            if not executors:
                await message.answer("–¢–∞–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–µ—Ç –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º –∞—Ä—Ö–∏–≤–µ")
                await search(message=message)
            else:
                await message.answer(
                    text="–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π",
                    reply_markup=get_button_is_search_executor(
                        executors_list=executors,
                    ),
                )
        elif executor_country:
            executors_list = ExecutorSQLAlchemyRepository().get_executors_is_user(
                user_id=user.id
            )
            executors = []
            for executor in executors_list:
                if executor.country.lower() == mess.lower():
                    executors.append(executor)

            await state.clear()
            await bot.send_message(
                chat_id=message.chat.id,
                text="–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
                reply_markup=ReplyKeyboardRemove(),
            )
            if not executors:
                await message.answer(
                    "C —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–æ–π –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º –∞—Ä—Ö–∏–≤–µ"
                )
                await search(message=message)
            else:
                await message.answer(
                    text="–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π",
                    reply_markup=get_button_is_search_executor(
                        executors_list=executors,
                    ),
                )
        elif genre:
            executors = ExecutorSQLAlchemyRepository().get_executors_is_user(
                user_id=user.id
            )
            list_executors = []
            for executor in executors:
                for g in executor.genres:
                    if g.title.lower() == mess.lower():
                        list_executors.append(executor)
            await state.clear()
            await bot.send_message(
                chat_id=message.chat.id,
                text="–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
                reply_markup=ReplyKeyboardRemove(),
            )

            if not list_executors:
                await message.answer(
                    "–í —Ç–∞–∫–æ–º –∂–∞–Ω—Ä–µ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º –∞—Ä—Ö–∏–≤–µ"
                )
                await search(message=message)
            else:
                await message.answer(
                    text="–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π",
                    reply_markup=get_button_is_search_executor(
                        executors_list=list_executors,
                    ),
                )


@router.callback_query(F.data.startswith("input "))
async def show_executors_is_search(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ –ø–æ–∏—Å–∫—É."""
    _, executor_id = call.data.split(" ")

    user = UserSQLAlchemyRepository().get_user_by_telegram(
        telegram=call.message.chat.id,
    )
    executor = ExecutorSQLAlchemyRepository().get_executor_by_id(
        id=int(executor_id), user_id=user.id
    )

    data_executor = get_info_executors(executor=executor, user=user)

    album = None
    list_songs = None

    await bot.send_message(
        chat_id=call.message.chat.id,
        reply_markup=ReplyKeyboardRemove(),
        text="–°–ø–∏—Å–æ–∫ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π",
    )
    await call.message.answer(
        text=data_executor,
        reply_markup=get_albums_executors_button(
            executor=executor,
            user=user,
            album=album,
            list_songs=list_songs,
        ),
    )
