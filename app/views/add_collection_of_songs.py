import asyncio
from dataclasses import dataclass
from typing import List

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ContentType
from aiogram.filters import StateFilter

from extensions import bot
from keyboards.reply import get_add_music_button, get_music_menu_button
from error_handlers import cheak_data_is_number
from repository.executor import ExecutorSQLAlchemyRepository
from repository.album import AlbumSQLAlchemyRepository
from repository.song import SongSQLAlchemyRepository
from repository.genre import GengreSQLAlchemyRepository
from repository.user import UserSQLAlchemyRepository
from config import settings


router = Router(name=__name__)


class AddCollectionSong(StatesGroup):
    """FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω –≤ —Å–±–æ—Ä–Ω–∏–∫"""

    counter = State()
    list_songs = State()
    title = State()
    year = State()
    quantity = State()
    song = State()


@dataclass
class MusicSong:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_id –ø–µ—Å–Ω–∏ –∏ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω –∞–ª—å–±–æ–º–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""

    file_id: str
    list_songs: List


music = MusicSong(
    file_id="",
    list_songs=[],
)


@router.message(StateFilter(None), F.text == "üíæ –î–æ–±–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É –≤ —Å–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω üíæ")
async def start_add_collection_song(message: Message, state: FSMContext):
    """FSM AddCollectionSong.–ü—Ä–æ—Å–∏—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —Ö–æ—á–µ—Ç —Å–∫–∏–Ω—É—Ç—å."""

    await state.clear()

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∏–Ω—É—Ç—å.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 30 —à—Ç—É–∫",
        reply_markup=get_add_music_button(),
    )
    await state.set_state(AddCollectionSong.counter)
    await state.update_data(counter=0)
    await state.set_state(AddCollectionSong.list_songs)
    await state.update_data(list_songs=[])
    await state.set_state(AddCollectionSong.title)
    await state.update_data(title=settings.AlBUM_TITLE_COLLECTION)
    await state.set_state(AddCollectionSong.year)
    await state.update_data(year=-1)
    await state.set_state(AddCollectionSong.quantity)


@router.message(AddCollectionSong.song, F.text == "–û—Ç–º–µ–Ω–∞")
@router.message(AddCollectionSong.quantity, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_add_collection_song(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–µ–Ω –≤ —Å–±–æ—Ä–Ω–∏–∫."""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–µ–Ω –≤ —Å–±–æ—Ä–Ω–∏–∫ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await bot.send_message(
        chat_id=message.chat.id,
        text="–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤",
        reply_markup=get_music_menu_button(),
    )


@router.message(AddCollectionSong.quantity, F.text)
async def add_collection_quantity(message: Message, state: FSMContext):
    """FSM AddCollectionSong.–ü—Ä–æ—Å–∏—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∫–∏–Ω—É—Ç—å –ø–µ—Å–Ω–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω."""
    quantity, mess = cheak_data_is_number(data=message.text, quantity=30)
    if not quantity:
        await message.answer(
            f"{mess['error']}\n\n–í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            "–ø–µ—Å–µ–Ω –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∏–Ω—É—Ç—å.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 30 —à—Ç—É–∫"
        )
    else:
        await message.answer(
            "–°–∫–∏–¥—ã–≤–∞–π—Ç–µ –ø–µ—Å–Ω–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–±–æ—Ä–Ω–∏–∫ –Ω–µ –±–æ–ª–µ–µ 30 —à—Ç—É–∫"
        )
        await state.set_state(AddCollectionSong.quantity)
        await state.update_data(quantity=quantity)
        await state.set_state(AddCollectionSong.song)


@router.message(AddCollectionSong.song)
async def finish_add_collection_song(message: Message, state: FSMContext):
    """FSM AddCollectionSong.–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Å–Ω–∏ –≤ —Å–±–æ—Ä–Ω–∏–∫."""

    async def task():
        """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Å–µ–Ω —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∫–∏–Ω—É—Ç—ã—Ö –ø–µ—Å–µ–Ω."""
        global music

        data = await state.get_data()
        counter = data["counter"] + 1
        list_songs = data["list_songs"]
        quantity = data["quantity"]
        list_songs.append([message.audio.file_id, message.audio.file_name])

        await state.set_state(AddCollectionSong.counter)
        await state.update_data(counter=counter)
        await state.set_state(AddCollectionSong.list_songs)
        await state.update_data(list_songs=list_songs)
        await state.set_state(AddCollectionSong.song)

        if counter == quantity:
            music.list_songs = list_songs
            music.file_id = message.audio.file_id
        return

    if message.content_type == ContentType.AUDIO:
        global music

        await bot.send_message(
            chat_id=message.chat.id, text="–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω –≤ —Å–±–æ—Ä–Ω–∏–∫,"
        )

        await asyncio.gather(task())
        data = await state.get_data()
        if data["counter"] > 30:
            await state.clear()
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 30")
            await start_add_collection_song(message=message, state=state)
            return
        if message.audio.file_id == music.file_id:
            data = await state.get_data()
            if data["counter"] > 30:
                await state.clear()
                await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 30")
                await start_add_collection_song(message=message, state=state)
                return

            user = UserSQLAlchemyRepository().get_user_by_telegram(
                telegram=message.chat.id,
            )

            if not user:
                UserSQLAlchemyRepository().create_user(
                    telegram=message.chat.id,
                    name=message.from_user.first_name,
                )
                user = UserSQLAlchemyRepository().get_user_by_telegram(
                    telegram=message.chat.id
                )

            executor = ExecutorSQLAlchemyRepository().get_executor_by_name_and_country(
                name=user.name, country=user.name, user_id=user.id
            )
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω
            if not executor:
                genre = GengreSQLAlchemyRepository().get_genres(
                    title_list=["—Å–±–æ—Ä–Ω–∏–∫"],
                )
                if not genre:
                    GengreSQLAlchemyRepository().create_one_genre(title="—Å–±–æ—Ä–Ω–∏–∫")
                    genre = GengreSQLAlchemyRepository().get_genres(
                        title_list=["—Å–±–æ—Ä–Ω–∏–∫"],
                    )

                ExecutorSQLAlchemyRepository().create_executor(
                    name=user.name,
                    user=user,
                    list_genres=genre,
                    country=user.name,
                )

                executor = (
                    ExecutorSQLAlchemyRepository().get_executor_by_name_and_country(
                        name=user.name, country=user.name, user_id=user.id
                    )
                )

            album = AlbumSQLAlchemyRepository().get_album(
                executor_name=executor.name,
                title=data["title"],
                executor_id=executor.id,
            )
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–±–æ—Ä–Ω–∏–∫–∞ –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω
            if not album:
                AlbumSQLAlchemyRepository().create_album(
                    title=data["title"],
                    year=data["year"],
                    executor_country=executor.country,
                    executor_id=executor.id,
                    executor_name=executor.name,
                )
                album = AlbumSQLAlchemyRepository().get_album(
                    executor_id=executor.id,
                    title=data["title"],
                    executor_name=executor.name,
                )

            songs = SongSQLAlchemyRepository().get_songs(album_id=album.id)

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–µ–Ω –≤ –∞–ª—å–±–æ–º
            list_songs = data["list_songs"]
            order = 1
            if songs:
                order = songs[-1].order + 1
            result = SongSQLAlchemyRepository().create_songs(
                songs=list_songs,
                album_id=album.id,
                executor_name=executor.name,
                executor_album=album.title,
                order=order,
            )
            if result:
                await state.clear()
                await message.answer("–ü–µ—Å–Ω–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–±–æ—Ä–Ω–∏–∫")
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤",
                    reply_markup=get_music_menu_button(),
                )
            else:
                await state.clear()
                await message.answer("–ü–µ—Å–Ω–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ —Å–±–æ—Ä–Ω–∏–∫–µ")
                await start_add_collection_song(message=message, state=state)

    else:
        await message.answer(
            "–°–∫–∏–¥—ã–≤–∞–µ–º—ã–µ –ø–µ—Å–Ω–∏ –¥–æ–ª–∂–Ω—ã–µ –±—ã—Ç—å –≤ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–µ\n\n"
            "–°–∫–∏–¥—ã–≤–∞–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–µ—Å–Ω–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–±–æ—Ä–Ω–∏–∫ –Ω–µ –±–æ–ª–µ–µ 30 —à—Ç—É–∫"
        )
